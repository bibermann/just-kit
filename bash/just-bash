#!/usr/bin/env bash

# NOTE: This file needs to be sourced.

success_messages=()
error_messages=()

if command -v nvm >/dev/null 2>&1; then
  nvm use
  success_messages+=("✔ Enabled node environment for nvm/yarn.")
else
  error_messages+=("✗ No node environment: nvm not found.")
fi

# Define custom _just function that integrates multiple recipe completions
_just() {
  # Check if we're completing a known recipe
  if [[ ${COMP_CWORD} -ge 2 ]]; then
    local current_recipe="${COMP_WORDS[1]}"

    # Find the index of the current recipe in our array
    local recipe_index=-1
    for i in "${!just_recipe_names[@]}"; do
      if [[ "${just_recipe_names[$i]}" == "$current_recipe" ]]; then
        recipe_index=$i
        break
      fi
    done

    # If we found a matching recipe, handle its completion
    if [[ $recipe_index -ne -1 ]]; then
      # Adjust COMP_WORDS and COMP_CWORD to make it look like we're completing the recipe directly
      local recipe_words=("app")
      local i
      for ((i = 2; i < ${#COMP_WORDS[@]}; i++)); do
        recipe_words+=("${COMP_WORDS[i]}")
      done

      # Set the COMP variables for the recipe completion function
      COMP_WORDS=("${recipe_words[@]}")
      COMP_CWORD=$((COMP_CWORD - 1))

      # Call the appropriate completion function
      ${just_recipe_completion_functions[$recipe_index]} "${just_recipe_cli_paths[$recipe_index]}"
      return 0
    fi
  fi

  # Fall back to the original just completion for all other cases
  _original_just "$@"
}

if command -v just >/dev/null 2>&1; then
  recipes_with_typer_completion="$(JUST_COLOR=never just -l --list-heading '' --list-prefix '' | \grep -E '\*TYPER_ARGS\b' | awk '{print $1}')"

  if [ -n "$recipes_with_typer_completion" ]; then
    # Eval the `just` completion code, renaming the completion function _just.
    # The complete action will still trigger the function _just,
    # which we will overwrite later, so we don't need to re-run the complete command.
    eval "$(just --completions bash | sed 's/^_just/_original_just/')"

    # Parse recipes into arrays
    just_recipe_names=()
    just_recipe_cli_paths=()
    while read -r name; do
      just_recipe_names+=("$name")
      just_recipe_cli_paths+=("$(eval "echo $(just 2>&1 -n "$name" | tail -1)")")
    done <<<"$recipes_with_typer_completion"
    just_recipe_completion_functions=() # Will be populated below

    # Eval the completion code for all recipes
    for i in "${!just_recipe_names[@]}"; do
      just_recipe_completion_code="$(${just_recipe_cli_paths[$i]} --show-completion)"

      # Patch the generated function to run the (possibly multi-word) launcher via bash -c
      # This transforms:
      #   COMPREPLY=( $( env ... _XYZ.PY_COMPLETE=complete_bash $1 ) )
      # into:
      #   COMPREPLY=( $( env ... _XYZ.PY_COMPLETE=complete_bash bash -c -- "$1" ) )
      # And:
      #   complete -o default -F _xyzpy_completion xyz.py
      # into:
      #   complete -o default -F _xyzpy_completion app
      just_recipe_completion_code="$(echo "$just_recipe_completion_code" \
        | sed -E 's/(_[A-Za-z0-9_.]+_COMPLETE=complete_bash)[[:space:]]+\$1[[:space:]]*\)/\1 bash -c -- "\$1" )/' \
        | sed -E 's/^(complete[^\n]*[[:space:]])[^[:space:]]+$/\1app/'
      )"

      # Extract function name and eval
      just_recipe_completion_function="$(echo "$just_recipe_completion_code" | sed -n 's/^\(_[^(]*\)().*/\1/p' | head -1)"
      just_recipe_completion_functions+=("$just_recipe_completion_function")
      eval "$just_recipe_completion_code"
    done

    success_messages+=("✔ Enabled shell completion for just recipes: ${just_recipe_names[*]}")
  fi
else
  error_messages+=("✗ No shell completion for just recipes: just not found.")
fi

for msg in "${success_messages[@]}"; do echo "$msg"; done
for msg in "${error_messages[@]}"; do echo 1>&2 "$msg"; done
if [ ${#error_messages[@]} -gt 0 ]; then return 1; fi

export IS_JUST_BASH_SOURCED=1
